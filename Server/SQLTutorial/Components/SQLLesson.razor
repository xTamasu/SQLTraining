@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedLocalStorage   BrowserStorage;

<MemoEdit @bind-Text="@SQLAnswer" />

<Blazorise.Bootstrap.Button Color="Color.Primary" Clicked="@Answer">SQL prüfen</Blazorise.Bootstrap.Button>
@if (!string.IsNullOrWhiteSpace(Hint))
{
    <Blazorise.Button Clicked="@triggerHint" Color="Color.Warning">Hinweis</Blazorise.Button>
}

@if (TableResultAnswer != null && TableResultSolution != null)
{
    <Blazorise.Button Color="Color.Info" Clicked="@triggerHidden"><Blazorise.Icon Name="IconName.Compress" /></Blazorise.Button>
}

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <Blazorise.Text Color="TextColor.Danger">
        <Blazorise.Text>@ErrorMessage</Blazorise.Text>
    </Blazorise.Text>
}

@if (showHint)
{
    <Alert Color="Color.Warning" Margin="Margin.Is2.FromTop" Visible="true">
        <Blazorise.Text Color="TextColor.Body">@Hint</Blazorise.Text>
    </Alert>
}

@if (TableResultAnswer != null && TableResultSolution != null)
{
    @if (!hidden)
    {
        @if (TableResultAnswer != null)
        {
            <SQLTutorial.Components.SQLResultTable TableResult="TableResultAnswer" />
            if (TableResultSolution != null)
            {
                <Blazorise.Text Color="@GetCorrectAnswerColor()">@GetCorrectAnswerText()</Blazorise.Text>
                <Accordion>
                    <Collapse Visible="@collapse1Visible">
                        <CollapseHeader>
                            <Heading Size="HeadingSize.Is5">
                                <Button Color="Color.Info" Clicked="@(()=>collapse1Visible = !collapse1Visible)">Zeige Korrekte Antwort</Button>
                            </Heading>
                        </CollapseHeader>
                        <CollapseBody>
                            <Alert Color="Color.Info" Visible="true">
                                <Blazorise.Heading Size="HeadingSize.Is4">Lösung</Blazorise.Heading>
                                <code>
                                    @foreach (var line in SQLSolution.Split("\n"))
                                    {
                                        @line.Trim();<br />
                                    }
                                </code>
                            </Alert>
                            <SQLResultTable TableResult="TableResultSolution" />
                        </CollapseBody>
                    </Collapse>
                </Accordion>
            }
        }
    }
}

@code {

    bool collapse1Visible = false;

    [Parameter]
    public string SQLSolution { get; set; }

    [Parameter]
    public string Hint { get; set; }

    [Parameter]
    public Guid SavedAnswerGuid { get; set; }

    private bool showHint = false;
    private string SQLAnswer;
    private bool hidden = false;

    private SessionStorage sessionStorage;

    private TableResult TableResultAnswer;
    private TableResult TableResultSolution;

    private string ErrorMessage;

    protected async override Task OnInitializedAsync()
    {
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            sessionStorage = await GetSessionStorage();
            if (!SavedAnswerGuid.Equals(Guid.Empty))
            {
                SQLAnswer = GetSavedAnswer(SavedAnswerGuid);
            }
            StateHasChanged();
        }
    }

    private async Task SetSessionStorage(SessionStorage session)
    {
        if (session != null)
        {
            var json = SessionStorage.ToJSON(session);
            await BrowserStorage.SetAsync("sessionstorage", json);
        }
    }

    private async Task<SessionStorage> GetSessionStorage()
    {
        var answer = (await BrowserStorage.GetAsync<string>("sessionstorage"));
        if (answer.Success && !string.IsNullOrEmpty(answer.Value))
        {
            return SessionStorage.FromJSON(answer.Value);
        }
        return new SessionStorage();
    }

    private async void Answer()
    {
        string value;
        if (sessionStorage == null)
        {
            await SetSessionStorage(new SessionStorage());
            sessionStorage = await GetSessionStorage();
        }
        if (sessionStorage != null)
        {
            if (sessionStorage.answers.TryGetValue(SavedAnswerGuid, out value))
            {
                sessionStorage.answers[SavedAnswerGuid] = SQLAnswer;
            }
            else
            {
                sessionStorage.answers.Add(SavedAnswerGuid, SQLAnswer);
            }
            await SetSessionStorage(sessionStorage);
        }
        TableResultSolution = startQuery(SQLSolution);
        TableResultAnswer = startQuery(SQLAnswer);
        StateHasChanged();
    }

    private void triggerHint()
    {
        showHint = !showHint;
    }

    private void triggerHidden()
    {
        hidden = !hidden;
    }

    private TableResult startQuery(string SQL)
    {
        try
        {
            ErrorMessage = "";
            var mysql = new SQLBridge();
            return mysql.Query(SQL);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            return null;
        }
    }

    private TextColor GetCorrectAnswerColor()
    {
        return CompareTableData() ? TextColor.Success : TextColor.Danger;
    }

    private string GetCorrectAnswerText()
    {
        return CompareTableData() ? "Korrekt!" : "Falsch! Versuch es nochmal!";
    }

    private bool CompareTableData()
    {
        var cache = TableResultSolution.GetAllRowValues().ToList();
        foreach (var row in TableResultAnswer.Rows)
        {
            foreach (var cell in row.Values)
            {
                if (cache.Contains(cell))
                {
                    cache.Remove(cell);
                }
            }
        }
        return !cache.Any();
    }

    private string GetSavedAnswer(Guid guid)
    {
        try
        {
            if (sessionStorage != null)
            {
                var saved = sessionStorage.answers.GetValueOrDefault(guid);
                return !string.IsNullOrWhiteSpace(saved) ? saved : "";
            }
            return "";
        }
        catch (Exception)
        {
            return "";
        }
    }
}
